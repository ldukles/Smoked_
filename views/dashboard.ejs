
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="/public/style.css"/>
	<link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Kaushan+Script&display=swap"
      rel="stylesheet"
    />
	<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
	<script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBnsU4VIC5lSB4hTs98REZJ0s-ipFaLoA&callback=initMap&libraries=places&v=weekly"
      defer
    ></script>
	<title>MEEN Auth Starter</title>
</head>
<nav><%- include('./partials/nav.ejs')  %></nav>
<body>
	
	<br />
	<div class="intro">
	<p>Welcome to Smoked!</p>
		<p>A web application designed to allow you to keep track of all the cannabis products you've tried. </p>
			<p>Smoke Responsibly</p>
		</div>
       <h2><a href="/products">Currently Smoking</a></h2>

	 <!-- <div id="map"></div> 
<script type="module" defer>
function handleGetData(event) {
	event.preventDefault();

	$.ajaz(URL = {
		url: 'https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Dispensary&inputtype=textquery&fields=formatted_address%2Cname%2Crating%2Copening_hours%2Cgeometry&key=AIzaSyDBnsU4VIC5lSB4hTs98REZJ0s-ipFaLoA',
		method: 'GET',
		timeout: 0,
		headers: {},
	})

	let map = google.maps.Map;
	let service = google.maps.places.PlacesService;
	let infowindow = google.maps.InfoWindow;
	
	function initMap() {
 	 const sydney = new google.maps.LatLng(-33.867, 151.195);

	  infowindow = new google.maps.InfoWindow();

map = new google.maps.Map(document.getElementById("map"), {
  center: sydney,
  zoom: 15,
});

service = new google.maps.places.PlacesService(map);

service.findPlaceFromQuery(
  request,
  (
	results = google.maps.places.PlaceResult[i] | null,
	status = google.maps.places.PlacesServiceStatus
  ) => {
	if (status === google.maps.places.PlacesServiceStatus.OK && results) {
	  for (let i = 0; i < results.length; i++) {
		createMarker(results[i]);
	  }

	  map.setCenter(results[0].geometry!.location!);
	}
  }
);
}
function createMarker(place = google.maps.places.PlaceResult) {
  if (!place.geometry || !place.geometry.location) return;

  const marker = new google.maps.Marker({
    map,
    position: place.geometry.location,
  });

  google.maps.event.addListener(marker, "click", () => {
    infowindow.setContent(place.name || "");
    infowindow.open(map);
  });
};

declare global {
  interface Window {
    initMap: () => void;
  }
}
window.initMap = initMap;
export {};

		 </script>
	  -->

	</body>

</html>